.\" -*- mode: nroff -*-
.\"-
.\" Copyright © 2008, 2009, 2010, 2016, 2018, 2020
.\"	mirabilos <m@mirbsd.org>
.\" Copyright © 2020
.\"	mirabilos <t.glaser@tarent.de>
.\" Licensor: Deutsche Telekom
.\"
.\" Provided that these terms and disclaimer and all copyright notices
.\" are retained or reproduced in an accompanying document, permission
.\" is granted to deal in this work without restriction, including un‐
.\" limited rights to use, publicly perform, distribute, sell, modify,
.\" merge, give away, or sublicence.
.\"
.\" This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
.\" the utmost extent permitted by applicable law, neither express nor
.\" implied; without malicious intent or gross negligence. In no event
.\" may a licensor, author or contributor be held liable for indirect,
.\" direct, other damage, loss, or other issues arising in any way out
.\" of dealing in the work, even if advised of the possibility of such
.\" damage or existence of a defect, except proven that it results out
.\" of said person’s immediate fault when using the work as intended.
.\"-
.\" Try to make GNU groff and AT&T nroff more compatible
.\" * ` generates ‘ in gnroff, so use \`
.\" * ' generates ’ in gnroff, \' generates ´, so use \*(aq
.\" * - generates ‐ in gnroff, \- generates −, so .tr it to -
.\"   thus use - for hyphens and \- for minus signs and option dashes
.\" * ~ is size-reduced and placed atop in groff, so use \*(TI
.\" * ^ is size-reduced and placed atop in groff, so use \*(ha
.\" * \(en does not work in nroff, so use \*(en for a solo en dash
.\" *   and \*(EM for a correctly spaced em dash
.\" * <>| are problematic, so redefine and use \*(Lt\*(Gt\*(Ba
.\" Also make sure to use \& *before* a punctuation char that is to not
.\" be interpreted as punctuation, and especially with two-letter words
.\" but also (after) a period that does not end a sentence (“e.g.\&”).
.\" The section after the "doc" macropackage has been loaded contains
.\" additional code to convene between the UCB mdoc macropackage (and
.\" its variant as BSD mdoc in groff) and the GNU mdoc macropackage.
.\"
.ie \n(.g \{\
.	if \*[.T]ascii .tr \-\N'45'
.	if \*[.T]latin1 .tr \-\N'45'
.	if \*[.T]utf8 .tr \-\N'45'
.	ds <= \[<=]
.	ds >= \[>=]
.	ds Rq \[rq]
.	ds Lq \[lq]
.	ds sL \(aq
.	ds sR \(aq
.	if \*[.T]utf8 .ds sL `
.	if \*[.T]ps .ds sL `
.	if \*[.T]utf8 .ds sR '
.	if \*[.T]ps .ds sR '
.	ds aq \(aq
.	ds TI \(ti
.	ds ha \(ha
.	ds en \(en
.\}
.el \{\
.	ds aq '
.	ds TI ~
.	ds ha ^
.	ds en \(em
.\}
.ie n \{\
.	ds EM \ \*(en\ \&
.\}
.el \{\
.	ds EM \f(TR\^\(em\^\fP
.\}
.\"
.\" Implement .Dd with the Mdocdate RCS keyword
.\"
.rn Dd xD
.de Dd
.ie \\$1$Mdocdate: \{\
.	xD \\$2 \\$3, \\$4
.\}
.el .xD \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8
..
.\"
.\" .Dd must come before the macropackage-specific setup code.
.\"
.Dd $Mdocdate: September 8 2020 $
.\"
.\" Check which macro package we use, and do other -mdoc setup.
.\"
.ie \n(.g \{\
.	if \*[.T]utf8 .tr \[la]\*(Lt
.	if \*[.T]utf8 .tr \[ra]\*(Gt
.	ie d volume-ds-1 .ds tT gnu
.	el .ie d doc-volume-ds-1 .ds tT gnp
.	el .ds tT bsd
.\}
.el .ds tT ucb
.\"-
.Dt ECNBITS_TC 3
.Os ECN-Bits
.Sh NAME
.Nm ecnbits_prep ,
.Nm ecnbits_tc
.Nd set up a socket to retrieve packets' ECN bits
.Sh SYNOPSIS
.In sys/types.h
.In sys/socket.h
.In ecn\-bits.h
.Ft int
.Fn ecnbits_prep "int socketfd" "int af"
.Ft int
.Fn ecnbits_tc "int socketfd" "int af" "unsigned char iptos"
.Sh DESCRIPTION
The
.Fn ecnbits_prep
function sets up a network socket (IPv6 or legacy IPv4) to retrieve
ECN bits, or rather, the traffic class octet, from incoming packets,
whereas the
.Fn ecnbits_tc
function sets the default traffic class outgoing packets are sent with.
This works well with datagram sockets (UDP); use with stream sockets
(TCP) may not work completely, for example the operating system may
change the sent traffic class value; operating on v4-mapped IPv6 sockets
.Pq Li ::FFFF.0.0.0.0/96
may be unsupported (although known to work under Linux/Android);
no outgoing traffic class can be set under Windows\(rg or WSL.
These functions are thread-safe.
.Pp
The
.Ar socketfd
itself is not changed, but a few socket options are enabled.
For this to work, the
.Ar af
argument is expected to carry the address family used with the socket
.Pq Li AF_INET6 No or Li AF_INET ;
this is the same as the first argument to
.Xr socket 2
.Pq Li domain .
Only these address families are known.
.Pp
The
.Ar iptos
value is expected to contain the traffic class octet intended to be
sent out with this socket; this can be one of the ECN values...
.Bd -literal
#define ECNBITS_NON	0 /* non-ECN-capable transport */
#define ECNBITS_ECT0	2 /* ECN-capable; L4S: legacy transport */
#define ECNBITS_ECT1	1 /* ECN-capable; L4S: L4S-aware transport */
#define ECNBITS_CE	3 /* congestion experienced */
.Ed
.Pp
\&... possibly or'd with a system-provided value such as
.Dv IPTOS_LOWDELAY ,
a DSCP and/or class value or really anything appropriate.
The operating system defaults usually to either
.Li 0 Pq Li ECNBITS_NON
or
.Li 2 Pq Li ECNBITS_ECT0 .
Note that ISPs can change the traffic class of packets they transmit.
.Pp
Note that the
.Ar iptos
value is only used to set the default outgoing traffic class.
It can still be overridden by using
.Xr sendmsg 2
with a suitable
.Xr cmsg 3
control message such as one created by
.Xr ecnbits_mkcmsg 3 ;
the ECN-Bits c/server example demonstrates this technique.
.Sh RETURN VALUES
The
.Fn ecnbits_prep
function sets the global variable
.Va errno
to indicate any problem and returns the value 2 on error, 1 if v4-mapped
support could not be set up (compare against
.Dv ECNBITS_PREP_FATAL
.Pq see Sx EXAMPLES No below
to determine if this should be ignored), and 0 on success.
.Pp
The
.Fn ecnbits_tc
function sets the global variable
.Va errno
to indicate any problem and returns the value 2 on error, 1 if v4-mapped
support could not be set up (compare against
.Dv ECNBITS_TC_FATAL
.Pq see Sx EXAMPLES No below
to determine if this should be ignored), and 0 on success.
.Sh EXAMPLES
The following code fragment illustrates the usage:
.Bd -literal -offset indent
int fd;

if ((fd = socket(AF_INET6, SOCK_DGRAM, 0)) == \-1)
	err(1, "socket");
/* do other setsockopt, if needed */
if (ECNBITS_PREP_FATAL(ecnbits_prep(fd, AF_INET6)))
	err(1, "ecnbits_setup: incoming traffic class");
if (ECNBITS_TC_FATAL(ecnbits_tc(fd, AF_INET6, ECNBITS_ECT0)))
	err(1, "ecnbits_setup: outgoing traffic class");
/* connect, bind, etc. */
.Ed
.Sh ERRORS
Besides the errors returned by the system calls used internally (currently, only
.Xr setsockopt 2 ,
but this is implementation detail subject to change without notice),
.Dv EAFNOSUPPORT
is returned if
.Ar af
is unknown.
.Sh SEE ALSO
.Xr sendmsg 2 ,
.Xr setsockopt 2 ,
.Xr cmsg 3 ,
.Xr ECNBITS_BITS 3 ,
.Xr ecnbits_rdmsg 3 ,
.Xr ecnbits_recvfrom 3 ,
.Xr ecnbits_stoaf 3 ,
.Xr ip 4 ,
.Xr ip6 4 ,
.Xr ip 7 ,
.Xr ipv6 7
.Pp
.Bl -tag -width 2n
.It Pa https://tools.ietf.org/html/rfc3542.html
Advanced Sockets API for IPv6
.It Pa https://github.com/tarent/ECN\-Bits
home of the ECN-Bits library
.It Pa https://github.com/EricssonResearch/scream
SCReAM, an example design for a managed latency-adaptive application
.El
.Sh STANDARDS
The implementation uses socket calls documented in the MidnightBSD manual page
.Xr ip6 4
.Pq standardised by RFC\ 3542
for IPv6, those documented by the MidnightBSD
.Xr ip 4
or GNU/Linux
.Xr ip 7
manual pages for legacy IPv4.
.Pp
The socket options for receiving the IP traffic class are also supported
on Windows\(rg environments, although setting it on outgoing packets isn't.
.Sh AUTHORS
.An mirabilos Aq t.glaser@tarent.de
for Deutsche Telekom.
.Sh CAVEATS
Using v4-mapped IPv6 sockets should be avoided; it only works on Linux,
if even that.
.Sh LICENCE
The MirOS Licence
.Pq short name : Li MirBSD
