apply plugin: 'com.android.library'

// project licence: The MirOS Licence AND MIT
// see src/legal/LICENCE
//
// apparently, there’s no standardised way to declare the project licence in Gradle:
// https://discuss.gradle.org/t/how-to-declare-a-license-for-a-gradle-project/26114

logger.error("OS:");
logger.error(org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem().isWindows() ? "yep" : "nee");

def getUnixPathEquivalent(afile) {
    if (!afile.exists())
        throw new GradleScriptException("File does not exist: " + afile, null);
    java.nio.file.Path p = afile.toPath()
    String s = afile.getAbsolutePath()
    if (!java.nio.file.Files.isSameFile(p, java.nio.file.Paths.get(s)))
        throw new GradleScriptException(Strings.format("File does not match its absolute path <%s>: %s", s, afile));
    if (org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
        s = s.replace('\\', '/');
    }
    if (!java.nio.file.Files.isSameFile(p, java.nio.file.Paths.get(s)))
        throw new GradleScriptException(Strings.format("File cannot be converted to Unix path <%s>: %s", s, afile));
    return s;
}

def dirToplev = getUnixPathEquivalent(project.layout.projectDirectory.asFile.getParentFile().getParentFile())

logger.error("Dir: " + dirToplev);

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 1
        targetSdkVersion 30
        ndkVersion "21.4.7075529"

        versionCode 1
        versionName "0.1"

        setProperty("archivesBaseName", "ecn-bitw")

        externalNativeBuild {
            cmake {
                //noinspection GroovyAssignabilityCheck because Gradle and the IDE have different world views…
                arguments "-DTOPLEV=" + dirToplev
            }
            return void // WTF‽
        }

        return void // WTF‽
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    externalNativeBuild {
        cmake {
            path "../../lib/CMakeLists.txt"
            return void // WTF‽
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    buildToolsVersion = '30.0.3'
}

dependencies {
    //implementation fileTree(dir: "libs", include: ["*.jar"])
}

project.afterEvaluate {
    task externalNativeBuildCleanContainingDirectory(type: Delete) {
        dependsOn tasks.externalNativeBuildCleanDebug, tasks.externalNativeBuildCleanRelease
        delete project.layout.projectDirectory.dir(".cxx").asFile
    }
    tasks.clean.dependsOn(tasks.externalNativeBuildCleanContainingDirectory)
}
