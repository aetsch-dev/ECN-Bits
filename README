┏━━━━━━━━━━┓
┃ ECN-Bits ┃
┗━━━━━━━━━━┛

┌──────────┐
│ Abstract │
└──────────┘

This repository contains tooling (libraries) and examples for
getting Explicit Congestion Notification (ECN) bits from IP
traffic, which is useful for L4S-aware applications. They are
available under liberal (Open Source) licences.

Development funded by Deutsche Telekom.

┌────────────────────────────────┐
│ Covered operating environments │
└────────────────────────────────┘

– Android/Linux: Java/JNI
  ‣ see android/README
  • library (AAR), with JNI component written in C,
    easily added into your own projects
    + java.net.ECNBitsDatagramSocket (extends DatagramSocket)
      to communicate and get the IP traffic class
    + de.telekom.llcto.ecn_bits.android.lib.Bits
      to access the ECN bits contained in the traffic class byte
    ! targetting Android 8 (Oreo, API 26/27) and up
    ! only tested on Android 8; higher versions need extra workarounds
    - no equivalent for DatagramChannel (probably unfeasible)
    – Netty integration: considered, not yet implemented
    : Status: mostly done; cleaning up and documenting; testing on 9/10
  • demo client GUI application

– Linux/BSD: C/CLI (libecn-bits.a/so)
  ‣ see c/README
  • library, manpages
  • CLI client and server examples (run for usage instructions)
  + known working on Linux, FreeBSD/MidnightBSD
  + also on the Linux variant Android runs on, e.g. built with musl libc
  + works on WSL, except setting the outgoing traffic class silently fails
  - cannot work on NetBSD, OpenBSD and derivatives: no API to get the TC
  ? might work on Darwin (Mac OSX and iOS), Solaris

– Windows: C/CLI (ecn-bitw.lib)
  ‣ see ws2/README
  • library, CLI client/server examples, copied from Linux/BSD C/CLI
    but adapted for Winsock2
  • manpages including preformatted plaintext form for GUI users
  • tested on Windows 10
  • additionally all systems the Linux/BSD C/CLI works on are supported
    (but given the Winsock2 idioms, it’s too complex an example for them)
  ! the outgoing traffic class cannot, at all, be set on Windows
  - so the server example doesn’t do it and just sends back one packet
  - functions dealing with setting the outgoing tc were also removed
  : Status: documentation of differences to Linux/BSD necessary

– Windows, C♯/.net
  • planning stages

– iOS (Apple)
  • pre-planning

┌────────────────┐
│ About ECN bits │
└────────────────┘

Both IP (IPv6) and Legacy IP (IPv4) have a Traffic Class
header field, eight bits in size. (This spans the second
and third nybble (half-octet) in IPv6; in IPv4 the whole
second octet is comprised of it.) The upper six bits are
used for DiffServ (DSCP) while the lower two are used by
ECN as follows:

• 00: NonECT — nōn-ECN-capable transport
• 10: ECT(0) — ECN-capable transport; L4S: legacy transport
• 01: ECT(1) — ECN-capable transport; L4S: L4S-aware transport
• 11: CE — congestion experienced

The Traffic Class header used to be known as IPToS.

┌────────────────────┐
│ Further directions │
└────────────────────┘

For writing L4S-aware applications, adaptively managing
bandwidth (and latency) are important. The scope of the
tooling included here is aids to get at the ECN bits of
the IP header; nothing more. SCReAM (Ericsson Research)
is a good example of how to actually adapt use of band‐
width based on network conditions:
‣ https://github.com/EricssonResearch/scream

Another way to retrieve the IP traffic class (therefore
also the ECN bits) is packet sniffing — while this adds
latency and has concerns in production (security etc.),
it’s a viable path for testing. This is being worked on
by another team; it will be linked to later.
