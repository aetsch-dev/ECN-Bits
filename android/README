See ../README for what this is all about.

This library mostly offers the following entry points:
• java.net.ECNBitsDatagramSocket (extends DatagramSocket)
• de.telekom.llcto.ecn_bits.android.lib.Bits

There’s no equivalent function for DatagramChannel, and
it is not likely one will be added, as some involved classes
are “final” and so not extensible.

The current implementation tries to reuse as much of the
system implementation as possible, using reflection and
proxying to gain access to it. From Android 9 onwards, each
version reduces this kind of access. This library was written
targetting Android 8, as oldest currently-supported version,
and will work on Android 9 and 10 but no later (see Wiki or
https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces#how_can_i_enable_access_to_non-sdk_interfaces
if it does not work out of the box). A workaround would mean
implementing a good part of the network stack. The best option
would be making Google add an API to retrieve the traffic class.

The example äpp shows “could not initialise ECN-Bits library”
on Android 9 and 10 if the settings need changing.

The library is wholly contained in the ecn-lib/ directory.
It can be added to other projects by importing into your project:
https://developer.android.com/studio/projects/android-library#AddDependency

The app/ subdirectory contains an example application. The
example client talks to a server (for example the one from
the C/CLI library) using DatagramSocket (“send packet”) or
DatagramChannel (“start channel”); the latter does not handle
ECN bits (see above). We could switch it to use Netty instead.

Normal Android build mechanisms (./gradlew build) or building
in IntelliJ / Android Studio should be used.

When testing on the Android emulator note that its network
emulation removes the ECN bits from packets. Use either a
connection to localhost (by compiling the C/CLI library, e.g.
with musl libc, statically and running the server on localhost)
or test on “bare metal” (real hardware), or connect to a VPN
from inside the emulator. We could add the server as example
GUI application, later.
