┏━━━━━━━━━━┓
┃ ECN-Bits ┃
┗━━━━━━━━━━┛

┌──────────┐
│ Abstract │
└──────────┘

This repository contains tooling (libraries) and examples for
getting Explicit Congestion Notification (ECN) bits from IP
traffic, which is useful for L4S-aware applications. They are
available under liberal (Open Source) licences.

Development funded by Deutsche Telekom.

┌────────────────────────────────┐
│ Covered operating environments │
└────────────────────────────────┘

– Android/Linux: Java/JNI (first solution)
  ‣ see android/README
  • library (AAR), with JNI component written in C,
    easily added into your own projects
    + java.net.ECNBitsDatagramSocket (extends DatagramSocket)
      to communicate and get the IP traffic class or the congestion factor
    + de.telekom.llcto.ecn_bits.android.lib.Bits
      to access the ECN bits contained in the traffic class byte
    ! targetting Android 8 (Oreo, API 26/27) and up, 11+ will not work
    ! tested on Android 8 and 9 (no change needed) and 10 (see docs)
    : Status: done for DatagramSocket and the first solution approach
      testing Android 11
    - no equivalent for DatagramChannel (probably unfeasible)
  • demo client GUI application

– BSD/Linux/WSL: C/CLI (libecn-bits.a/so)
  ‣ see c/README
  • library, manpages
  • CLI client and server examples (run for usage instructions)
  + known working on FreeBSD/MidnightBSD, Linux (including WSL 2)
  + also on the Linux variant Android runs on, e.g. built with musl libc
  + works on WSL 1, except setting the outgoing traffic class silently fails
  - cannot work on NetBSD, OpenBSD and derivatives: no API to get the TC
  ? might work on Darwin (Mac OSX and iOS), Solaris
  : Status: completed for those operating systems mentioned

– Windows: C/CLI (ecn-bitw.lib; libecn-bitw.a)
  ‣ see ws2/README
  • library, CLI client/server examples, copied from BSD/Linux/WSL C/CLI
    but adapted for Winsock2 (supersetting: keeping BSD sockets support
    so all systems that the BSD/Linux/WSL runs on can be used, modulo
    removed functionalitty (see below) and applications needing to honour
    some Winsock2 specifics to remain portable)
  • manpages including preformatted plaintext form for GUI users
  • tested on Windows 10, versions 1909 (WSL 1, WinSock), 2004 (WSL 2)
  ! the outgoing traffic class cannot, at all, be set on Windows and WSL 1
  - so the server example doesn’t do it and just sends back one packet
  - functions dealing with setting the outgoing tc were also removed
  : Status: complete
  ! WSL 2 in theory would work better than WSL 1 (as it uses the native
    Linux network stack) but the hypervisor side breaks networking in
    too many cases (no IPv6 support (up to that syscalls fail), lack of
    port forwarding for UDP, DNS resolver bugs), so users of networking
    are strongly encouraged to use WSL 1 instead.

– Windows, C++/UWP
  • realised by linking the C/CLI library into the application

– Windows, C♯/.net
  • planning stages

– iOS (Apple)
  • pre-planning

– Linux JDK: Java/JNI/CLI
  • pre-WIP (PoC, maybe extended to BSD/Winsock later)

┌────────────────┐
│ About ECN bits │
└────────────────┘

Both IP (IPv6) and Legacy IP (IPv4) have a Traffic Class
header field, eight bits in size. (This spans the second
and third nybble (half-octet) in IPv6; in IPv4 the whole
second octet is comprised of it.) The upper six bits are
used for DiffServ (DSCP) while the lower two are used by
ECN as follows:

• 00: NonECT — nōn-ECN-capable transport
• 10: ECT(0) — ECN-capable transport; L4S: legacy transport
• 01: ECT(1) — ECN-capable transport; L4S: L4S-aware transport
• 11: CE — congestion experienced

The Traffic Class header used to be known as IPToS.

┌────────────────────┐
│ Further directions │
└────────────────────┘

For writing L4S-aware applications, adaptively managing
bandwidth (and latency) are important. The scope of the
tooling included here is aids to get at the ECN bits of
the IP header; nothing more. SCReAM (Ericsson Research)
is a good example of how to actually adapt use of band‐
width based on network conditions:
‣ https://github.com/EricssonResearch/scream

Another way to retrieve the IP traffic class (therefore
also the ECN bits) is packet sniffing — while this adds
latency and has concerns in production (security etc.),
it’s a viable path for testing. This is being worked on
by another team; it will be linked to later.

The directory CONFLUENCE/ contains extra documentation,
in both importable form (*.doc) and as PDF export, with
a plaintext version to improve legibility and grepping,
for this library and demo programs, with screenshots.
