apply plugin: 'com.android.library'
apply plugin: 'de.mannodermaus.android-junit5'

def dirToplev = project.layout.projectDirectory.asFile.absolutePath

// project licence: The MirOS Licence AND GPLv2 with Classpath Exception AND Apache 2.0
// see src/legal/LICENCE and src/legal/COPYING
//
// “nh” module under Apache 2, see src/legal/LICENSE-2.0 for that
//
// apparently, there’s no standardised way to declare the project licence in Gradle:
// https://discuss.gradle.org/t/how-to-declare-a-license-for-a-gradle-project/26114

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 30
        ndkVersion "21.4.7075529"

        versionCode 5
        versionName "2.0"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles "consumer-rules.pro"

        externalNativeBuild {
            cmake {
                //noinspection GroovyAssignabilityCheck because Gradle and the IDE have different world views…
                arguments "-DTOPLEV=" + dirToplev
            }
            return void // WTF‽
        }

        return void // WTF‽
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/native/CMakeLists.txt"
            return void // WTF‽
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    buildToolsVersion = '30.0.3'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    annotationProcessor 'org.projectlombok:lombok:1.18.18'
    //noinspection AnnotationProcessorOnCompilePath because both are needed :/
    compileOnly 'org.projectlombok:lombok:1.18.18'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.18'
    //noinspection AnnotationProcessorOnCompilePath because both are needed :/
    testCompileOnly 'org.projectlombok:lombok:1.18.18'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'junit:junit:4.13.1'

    androidTestAnnotationProcessor 'org.projectlombok:lombok:1.18.18'
    //noinspection AnnotationProcessorOnCompilePath because both are needed :/
    androidTestCompileOnly 'org.projectlombok:lombok:1.18.18'
}

def dirForNativeNoNDK = project.layout.buildDirectory.get().dir("native-noNDK")
def srcForNativeNoNDK = project.layout.projectDirectory.dir("src/main/native").asFile

task createNativeNoNDK(type: Exec) {
    commandLine "/usr/bin/env", "mkdir", "-p", dirForNativeNoNDK.asFile.absolutePath
}
task buildCMakeNativeNoNDK(type: Exec) {
    dependsOn createNativeNoNDK
    workingDir dirForNativeNoNDK
    commandLine "/usr/bin/env", "cmake", "-DTOPLEV=" + dirToplev, "-DUNDER_NDK=OFF", srcForNativeNoNDK.absolutePath
}
task buildGMakeNativeNoNDK(type: Exec) {
    dependsOn buildCMakeNativeNoNDK
    workingDir dirForNativeNoNDK
    commandLine "/usr/bin/env", "make"
}

project.afterEvaluate {
    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        testDebugUnitTest {
            dependsOn buildGMakeNativeNoNDK
            systemProperty "java.library.path", dirForNativeNoNDK.asFile.absolutePath + ":" + System.getProperty("java.library.path")
        }
        testReleaseUnitTest {
            dependsOn buildGMakeNativeNoNDK
            systemProperty "java.library.path", dirForNativeNoNDK.asFile.absolutePath + ":" + System.getProperty("java.library.path")
        }
    }
}
