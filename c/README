┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ ECN-Bits • C/CLI for Linux/FreeBSD/MidnightBSD ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┌─────────────┐
│ Compilation │
└─────────────┘

With GNU make and build-essential installed, it is sufficient to run
“make” (“gmake” on BSD), either in the top-level “c” directory or a
subdirectory. (If the library was not yet installed system-wide, it
must have been locally built before the “client” and “server” example
directories can be built.) The usual variables (CC, AR, RANLIB,
CFLAGS, CPPFLAGS, LDFLAGS, LIBS, LDSTATIC, etc.) are supported.

Running “make install” will install the library, its manual pages
and development headers; this honours the standard PREFIX variable.
“make uninstall” will erase these installed files from the system.
(On BSD systems use “gmake install” and “gmake uninstall”.)

Statically linked against musl libc, the examples will also work
on Android, e.g. via adb shell; useful for testing.

Link a program with -lecn-bits to use the library; functions and
headers are documented in the manual pages.

┌───────────┐
│ Structure │
└───────────┘

inc/ ‣ development headers (public) for the library
lib/ ‣ library source code, manual pages (documentation)

client/ and server/
‣ example applications, see below

*.mk, GNUmakefile
‣ build system

┌───────────────────────┐
│ Example client/server │
└───────────────────────┘

These applications demonstrate how to use the ECN-Bits library
and are deliberately simple. See SCReAM for an actual example
of how to develop L4Sified bandwidth-adaptive applications.

Run the server on one system: ./server [host] port
(The arguments are for what IP/port this should bind to.
Numeric and NSS values are supported.)

Run the client on another (or same) system: ./client host post [tc]
(The arguments are for what system to connect to.)

tc sets the outgoing traffic class: NO, ECT0, ECT1, CE, or a
decimal, octal (leading 0) or hexadecimal (leading 0x) integer
between 0 and 255, inclusive (default: ECT0)

The client will send a “hello” packet to the server, which
receives it, displays a line with the timestamp it received
the packet, whether it was truncated, which ECN bits were set,
and its content.

The server then sends FOUR packets back, with almost the same
content (truncation, server timestamp, received ECN bits, as
above, and an arrow followed by a number). The trailing number
goes from 0 to 3 and matches the ECN bits set on the return
packet.

The client (after sending the initial packet it waits for up
to a second for responses) displays the packet data received
together with their ECN bits and local timestamps. (Timestamps
are in UTC.)

Both applications support IPv6 and legacy IPv4; the client
can be used against e.g. the BSD inetd daytime service as well,
or netcat-openbsd, for testing. The client terminates after
one run; the server can be terminated by pressing Ctrl-C.

Example session:

SERVER│$ ./server 1234
SERVER│Listening on [0.0.0.0]:1234... ok
SERVER│Listening on [::]:1234... ok
SERVER│
CLIENT│$ ./client localhost 1234
CLIENT│Trying [127.0.0.1]:1234... connected
SERVER│2020-07-28T21:51:53Z notrunc [127.0.0.1]:56895 ECT(0) <hi!>
CLIENT│2020-07-28T21:51:53Z no ECN <[127.0.0.1]:56895 2020-07-28T21:51:53Z ECT(0) notrunc -> 0>
CLIENT│2020-07-28T21:51:53Z ECT(1) <[127.0.0.1]:56895 2020-07-28T21:51:53Z ECT(0) notrunc -> 1>
CLIENT│2020-07-28T21:51:53Z ECT(0) <[127.0.0.1]:56895 2020-07-28T21:51:53Z ECT(0) notrunc -> 2>
CLIENT│2020-07-28T21:51:53Z ECN CE <[127.0.0.1]:56895 2020-07-28T21:51:53Z ECT(0) notrunc -> 3>
CLIENT│$ ./client ip6-localhost 1234
CLIENT│Trying [::1]:1234... connected
SERVER│2020-07-28T21:52:01Z notrunc [::1]:57863 ECT(0) <hi!>
CLIENT│2020-07-28T21:52:01Z no ECN <[::1]:57863 2020-07-28T21:52:01Z ECT(0) notrunc -> 0>
CLIENT│2020-07-28T21:52:01Z ECT(1) <[::1]:57863 2020-07-28T21:52:01Z ECT(0) notrunc -> 1>
CLIENT│2020-07-28T21:52:01Z ECT(0) <[::1]:57863 2020-07-28T21:52:01Z ECT(0) notrunc -> 2>
CLIENT│2020-07-28T21:52:01Z ECN CE <[::1]:57863 2020-07-28T21:52:01Z ECT(0) notrunc -> 3>

【IMPORTANT】 Note how the server binds to *both* 0.0.0.0 (INADDR_ANY)
and :: (IN6ADDR_ANY), not just IN6ADDR_ANY. This is so that it receives
IPv4 connections on IPv4 sockets, not IPv6 sockets as traffic class
handling on v4-mapped IPv6 sockets isn’t portable; see below for details.

┌─────────────┐
│ Portability │
└─────────────┘

This library and the example programs uses standard POSIX
system calls; they will generally work on unixoid operating
systems. However the API/ABI employed to set and read the
IP header traffic class octet is operating system-specific.

The IPv6 API is standardised in RFC3542, whose wording is
vague. All known implementations, however, choose the same
reading, and this library takes care to support the other
interpretation.

The legacy IP (IPv4) API/ABI is, au contraire, n̲o̲t̲ widely
standardised — this library supports the implementation by
Linux and the one in FreeBSD and MidnightBSD so far. Due to
the ABI not working on the old Linux kernel version Android
uses, the server example differs slightly on Linux to make
it work universally.

Receiving the traffic class on IPv6 sockets operating with
v4-mapped (::FFFF:0.0.0.0/96) IPv6 addresses is fragile:
Linux requires the IPv4 versions of the socket options and
control messages; MidnightBSD (and therefore FreeBSD) don’t
accept that (but since they disable v4-mapped by default,
this is no problem in reality). This library only attempts
somewhat supporting this on Linux, as Android uses that.
As implication, binding to only an IPv6 address, server-side,
may not work except perhaps on Linux (including WSL, but
excluding native Windows/Winsock2).

Use in multi-threaded applications is safe if the conditions
documented under CAVEATS in ecnbits_rdmsg(3) are met.

The traffic class for outgoing packets cannot be set under
Windows®, native or WSL, at all. This is a system limitation.
