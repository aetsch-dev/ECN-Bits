ECNBITS_RDMSG(3)         BSD Library Functions Manual         ECNBITS_RDMSG(3)

NAME
     ecnbits_rdmsg, ecnbits_recvmsg -- receive a message (read a packet) from
     a socket and determine the traffic class including ECN bits

SYNOPSIS
     #include <sys/types.h>
     #if defined(_WIN32) || defined(WIN32)
     #include <winsock2.h>
     #include <ws2tcpip.h>
     #else
     #include <sys/socket.h>
     #endif
     #include <ecn-bitw.h>

     SSIZE_T
     ecnbits_rdmsg(SOCKET handle, LPWSAMSG msg, int flags,
         unsigned short *ecnresult);

     SSIZE_T
     ecnbits_recvmsg(SOCKET handle, LPWSAMSG msg, int flags,
         unsigned short *ecnresult);

     Outside of Winsock2, the SOCKET type is just an int; LPWSAMSG is a far
     pointer to WSAMSG which is struct msghdr; SSIZE_T is spelt ssize_t.

     On Winsock2, msg->msg_control below is spelt msg->Control.buf instead.

DESCRIPTION
     The ecnbits_rdmsg() and ecnbits_recvmsg() functions work equivalent to
     the system call recvmsg(2) (on Winsock2: ecnws2_recvmsg() library call)
     but take an extra argument ecnresult.

     The ecnbits_recvmsg() function wraps the system call, extending: If
     ecnresult is NULL, ecnbits_recvmsg() just passes control to the equiva-
     lent system function recvmsg(2).  Otherwise, if msg->msg_control is NULL,
     a suitably large (see below) buffer is temporarily injected into a local
     WSAMSG, otherwise, the passed structure is used.  Then, the system call
     recvmsg(2) is executed, and upon success, the control buffer is inspected
     for the traffic class octet, which is stored, in ECNBITS_VALID(3) format,
     in the location pointed to by ecnresult if possible (if not, an indicator
     of invalidity is stored).  If the socket was not set up with
     ecnbits_prep(3) beforehand, determining the traffic class is usually not
     possible.  If the user passed a buffer as msg->msg_control that is not
     large enough for all control messages, determining it may also fail.
     ecnbits_recvmsg() ensures the temporarily injected buffer is not seen by
     the caller, but passes along other changes to the WSAMSG used.

     By contrast, ecnbits_rdmsg() assumes that ecnresult is not NULL, directly
     injects the suitably large control buffer into the passed msg structure
     and leaves it there for the caller to inspect afterwards.  This buffer is
     shared between ecnbits_rdmsg(), ecnbits_read(), ecnbits_recv(),
     ecnbits_recvfrom() and ecnbits_recvmsg(); it is not thread-isolated.

     Callers that know to set ecnresult should use ecnbits_rdmsg(), which is
     faster, unless drop-in compatibility with existing applications managing
     the msg->msg_control argument themselves is required.

     See recvmsg(2) for the description of msg and flags.

RETURN VALUES
     The ecnbits_rdmsg() and ecnbits_recvmsg() functions return the number of
     bytes received if successful; otherwise the value -1 is returned and the
     global variable errno is set to indicate the error.

     On Winsock2, WSAGetLastError() must be used to retrieve the error code.

EXAMPLES
     The following code fragment illustrates the usage:

           char buf[512];
           unsigned short ecnresult;
           #if defined(_WIN32) || defined(WIN32)
           WSAMSG msg;
           WSABUF iov;
           #else
           struct msghdr msg;
           struct iovec iov;
           #endif

           memset(&msg, 0, sizeof(msg));
           #if defined(_WIN32) || defined(WIN32)
           iov.buf = buf;
           iov.len = sizeof(buf);
           msg.lpBuffers = &iov;
           msg.dwBufferCount = 1;
           #else
           iov.iov_base = buf;
           iov.iov_len = sizeof(buf);
           msg.msg_iov = &iov;
           msg.msg_iovlen = 1;
           #endif
           if (ecnbits_rdmsg(socketfd, &msg, 0, &ecnresult) == (SSIZE_T)-1)
                   err(1, "recvmsg");
           if (ECNBITS_VALID(ecnresult))
                   printf("%s\n", ecnbits_meanings[ECNBITS_BITS(ecnresult)]);

     Note that the socket, after creation, must have been set up with a call
     to ecnbits_prep(3) (once) prior to use with this function.

ERRORS
     These functions return the same errors as the system call recvmsg(2).

SEE ALSO
     recvmsg(2), cmsg(3), ECNBITS_BITS(3), ecnbits_prep(3),
     ecnbits_recvfrom(3), ecnws2_recvmsg(3), ip(4), ip6(4), ip(7), ipv6(7),
     socket(7), udp(7)

     https://github.com/tarent/ECN-Bits
         home of the ECN-Bits library

     https://github.com/EricssonResearch/scream
         SCReAM, an example design for a managed latency-adaptive application

AUTHORS
     mirabilos <t.glaser@tarent.de> for Deutsche Telekom.

CAVEATS
     In a multi-threaded environment, use of the ECN-Bits library is only safe
     if one of these conditions is met:

     o   The functions ecnbits_rdmsg(), ecnbits_recvmsg(), ecnbits_recvfrom(),
         ecnbits_recv() and ecnbits_read() are called from only one thread.

     o   Out of these functions, only ecnbits_rdmsg() or ecnbits_recvmsg() are
         called, and in all calls to these functions, the msg->msg_control ar-
         gument is not NULL and neither it nor msg nor ecnresult are shared
         between threads.

LICENCE
     The MirOS Licence (short name: MirBSD)

ECN-Bits                      September 28, 2020                      ECN-Bits
